shiny::runApp()
install.packages("shinydashboard")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(shiny); runApp('~/Documents/paan/cubaan.R')
runApp('~/Documents/paan/cubaan.R')
runApp('~/Documents/paan/cubaan.R')
runApp('~/Documents/paan/cubaan.R')
runApp('~/Documents/paan/cubaan.R')
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
d <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
dist(input$n)
})
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
hist(d(),
main = paste("r", dist, "(", n, ")", sep = ""),
col = "#75AADB", border = "white")
})
# Generate a summary of the data ----
output$summary <- renderPrint({
summary(d())
})
# Generate an HTML table view of the data ----
output$table <- renderTable({
d()
})
}
ui <- fluidPage(
# App title ----
titlePanel("Tabsets"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select the random distribution type ----
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
# br() element to introduce extra vertical spacing ----
br(),
# Input: Slider for the number of observations to generate ----
sliderInput("n",
"Number of observations:",
value = 500,
min = 1,
max = 1000)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
)
)
runApp('~/Documents/paan/cubaan.R')
runApp('~/Documents/paan/cubaan.R')
runApp('~/Documents/paan/cubaan.R')
runApp()
runApp('~/Documents/paan/cubaan.R')
runApp('~/Documents/paan/cubaan.R')
runApp('~/Documents/paan/cubaan.R')
rnorm()
rnorm
runApp()
runApp('~/Documents/paan/cubaan.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runif
runApp('~/Documents/paan/cubaan.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rock
all_data <- read.csv("/export/home/farhan/Documents/paan/PermohonanZakat1.csv", head=TRUE, sep = ",")
shahalam <- all_data[all_data$Kampus == 'UiTM Shah Alam', ]
chosen_shahalam_table <- table(shahalam$Kategori.Asnaf, shahalam$Fakulti)
shahalam_zero_removed <- chosen_shahalam_table[, colSums(chosen_shahalam_table != 0) > 0]
shahalam_transpose <- t(shahalam_zero_removed)
shahalam_dataframe <- as.data.frame.matrix(shahalam_transpose)
shahalam_final_data <- data.frame(Fakulti = row.names(shahalam_dataframe), shahalam_dataframe)
rownames(shahalam_final_data) <- c()
q <- shahalam_final_data
q
runApp('~/Documents/paan/cubaan2.R')
runApp('~/Documents/paan/cubaan2.R')
runApp('~/Documents/paan/cubaan2.R')
runApp()
runApp()
runApp('~/Documents/paan/cubaan2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads')
runApp('~/Downloads')
runApp()
runApp('~/Documents/paan/cubaan.R')
runApp('~/Documents/paan/cubaan.R')
runApp()
runApp()
runApp()
runApp('~/Documents/paan/cubaan.R')
runApp()
View(all_data)
rm (all_data)
runApp()
runApp()
